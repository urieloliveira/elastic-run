name: publish

on:
  push:
    branches:
      - master
    
env:
  ENV_DIR: "src/core/envs"
jobs:
  build:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - uses: noliran/branch-based-secrets@v1
        with:
          secrets: ENV,ECR_REPOSITORY

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_ZONE_EAST_1 }}

      #- name: "Test and coverage"
      #  run: |
      #    npm install
      #    npm run test:cov

      - name: "Code Quality and Security Analysis"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      - uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      - name: "Create env file local"
        run: |
          if [ ${GITHUB_REF##*/} = "master" ]; then APP_ENV=production; fi
          if [ ${GITHUB_REF##*/} = "hml" ]; then APP_ENV=homolog; fi
          if [ ${GITHUB_REF##*/} = "dev" ]; then APP_ENV=development; fi
          cat <<EOF >> ${ENV_DIR}/.env.$APP_ENV
          ${{ secrets[env.ENV_NAME] }}
          EOF
          cat <<EOF >> ${ENV_DIR}/.env.test
          ${{ secrets.ENV_TEST }}
          EOF
          sudo snap install kubectl --classic
          aws eks --region ${{ secrets.AWS_ZONE_EAST_1 }} update-kubeconfig --name ${{ secrets.CLUSTER_NAME }}
          sudo echo APM_KIBANA_SERVICE_PRIVATE="http://$(kubectl get service/apm-server-apm-server -n apm-server -o jsonpath='{.spec.clusterIP}'):8200" >> src/nestjs/.env
          cat src/nestjs/.env
          cp ./eks/${GITHUB_REF##*/}/Dockerfile .

      - name: "Push Docker image to registry"
        run: |
          echo ${{ secrets[env.ECR_REPOSITORY_NAME] }}
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 365549336525.dkr.ecr.us-east-1.amazonaws.com
          REGISTRY_URL=365549336525.dkr.ecr.us-east-1.amazonaws.com
          TAG=$(aws ecr describe-images --repository-name ${{ secrets[env.ECR_REPOSITORY_NAME] }} --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text)
          TAG_IMAGE=`echo $TAG + 1 | bc`
          IMAGE="$REGISTRY_URL/${{ secrets[env.ECR_REPOSITORY_NAME] }}:$TAG_IMAGE"
           
          aws ecr get-login-password --region ${{ secrets.AWS_ZONE_EAST_1 }} | docker login --username AWS --password-stdin $REGISTRY_URL
          
          docker build -t docker-image-local .
          docker tag docker-image-local:latest $IMAGE
          docker push $IMAGE

          sed -i -e "s#IMAGE_VERSION#${IMAGE}#" ./eks/${GITHUB_REF##*/}/0_deployment.yaml

      - name: "Deploy Kubernetes"
        run: |
          EKS_PATH=./eks/${GITHUB_REF##*/}

          kubectl apply -f $EKS_PATH/0_deployment.yaml
          kubectl apply -f $EKS_PATH/1_service.yaml
          kubectl apply -f $EKS_PATH/2_hpa.yaml
